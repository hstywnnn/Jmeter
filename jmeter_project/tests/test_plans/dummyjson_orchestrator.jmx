<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DummyJSON Orchestrator Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">Orchestrates DummyJSON API calls using a code-centric approach.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="NUM_THREADS" elementType="Argument">
            <stringProp name="Argument.name">NUM_THREADS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Number of concurrent users</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_TIME" elementType="Argument">
            <stringProp name="Argument.name">RAMP_TIME</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Time to ramp up all users (seconds)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Number of iterations per user</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">../../lib_ext;../../scripts;../../scripts/test_cases</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Users" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${NUM_THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_TIME}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Test Runner" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
import groovy.lang.Binding
import groovy.lang.GroovyShell

// This script acts as the test runner, similar to test.describe in Playwright.
// It dynamically loads and executes individual test case scripts.

// Define test cases to run
def testCases = [
    "get_all_todos_test",
    "get_single_todo_test",
    "add_todo_test",
    "update_todo_test"
];

log.info("--- Starting Test Suite: DummyJSON API Tests ---");

testCases.eachWithIndex { testCaseName, index ->
    log.info("Running Test Case #${index + 1}: ${testCaseName}");
    try {
        def scriptFile = new File(System.getProperty("user.dir") + "/jmeter_project/scripts/test_cases/${testCaseName}.groovy");
        if (scriptFile.exists()) {
            def binding = new Binding();
            // Bind JMeter variables to the script context
            binding.setVariable("vars", vars);
            binding.setVariable("props", props);
            binding.setVariable("log", log);
            binding.setVariable("sampler", sampler);
            binding.setVariable("ctx", ctx);

            def shell = new GroovyShell(getClass().getClassLoader(), binding); // Use current classloader to inherit classpath
            shell.evaluate(scriptFile); // Execute the script file

            log.info("Test Case ${testCaseName} completed successfully.");
        } else {
            log.error("Test Case script not found: ${testCaseName}.groovy");
            sampler.setSuccessful(false as boolean); // Mark sampler as failed if script not found
        }

    } catch (Exception e) {
        log.error("Error running Test Case ${testCaseName}: " + e.getMessage(), e);
        sampler.setSuccessful(false as boolean); // Mark sampler as failed on error
    }
}

log.info("--- Test Suite Finished: DummyJSON API Tests ---");
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
